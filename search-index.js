var searchIndex = {};
searchIndex['iobuf'] = {"items":[[0,"","iobuf","A contiguous region of bytes, useful for I/O operations.",null,null],[3,"RWIobuf","","Read-Write Iobuf",null,null],[3,"ROIobuf","","Read-Only Iobuf",null,null],[3,"AROIobuf","","Atomic Read-Only Iobuf",null,null],[3,"UniqueIobuf","","A unique, immutable Iobuf.",null,null],[3,"IORingbuf","","A ring buffer implemented with `Iobuf`s.",null,null],[3,"AppendBuf","","Append-Only Input Buffer",null,null],[4,"BufSpan","","A span over potentially many Iobufs. This is useful as a \"string\" type where\nthe contents of the string can come from multiple IObufs, and you want to\navoid copying the buffer contents unnecessarily.",null,null],[13,"Empty","","A span over 0 bytes.",0,null],[13,"One","","A single span over one range.",0,null],[13,"Many","","A span over several backing Iobufs.",0,null],[4,"SpanIter","","An iterator over references to buffers inside a `BufSpan`.",null,null],[13,"Opt","","An optional item to iterate over.",1,null],[13,"Lot","","A lot of items to iterate over.",1,null],[4,"SpanMoveIter","","A moving iterator over buffers inside a `BufSpan`.",null,null],[13,"MoveOpt","","An optional item to iterate over.",2,null],[13,"MoveLot","","A lot of items to iterate over.",2,null],[11,"clone","","",3,{"inputs":[{"name":"roiobuf"}],"output":{"name":"self"}}],[11,"clone_from","","",3,{"inputs":[{"name":"roiobuf"},{"name":"self"}],"output":null}],[11,"drop","","",3,{"inputs":[{"name":"roiobuf"}],"output":null}],[11,"clone","","",4,{"inputs":[{"name":"rwiobuf"}],"output":{"name":"self"}}],[11,"clone_from","","",4,{"inputs":[{"name":"rwiobuf"},{"name":"self"}],"output":null}],[11,"drop","","",4,{"inputs":[{"name":"rwiobuf"}],"output":null}],[11,"write","","",4,null],[11,"flush","","",4,{"inputs":[{"name":"rwiobuf"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"aroiobuf"}],"output":{"name":"self"}}],[11,"clone_from","","",5,{"inputs":[{"name":"aroiobuf"},{"name":"self"}],"output":null}],[11,"drop","","",5,{"inputs":[{"name":"aroiobuf"}],"output":null}],[11,"read_only","","Safely converts a `UniqueIobuf` into a `ROIobuf`.",6,{"inputs":[{"name":"uniqueiobuf"}],"output":{"name":"roiobuf"}}],[11,"read_write","","Safely converts a `UniqueIobuf` into a `RWIobuf`.",6,{"inputs":[{"name":"uniqueiobuf"}],"output":{"name":"rwiobuf"}}],[11,"atomic_read_only","","Safely converts a `UniqueIobuf` into a `AROIobuf`.",6,{"inputs":[{"name":"uniqueiobuf"}],"output":{"name":"aroiobuf"}}],[11,"drop","","",6,{"inputs":[{"name":"uniqueiobuf"}],"output":null}],[11,"empty","","Constructs a trivially empty Iobuf, limits and window are 0, and there's\nan empty backing buffer. This will not allocate.",3,{"inputs":[{"name":"roiobuf"}],"output":{"name":"roiobuf"}}],[11,"from_str","","Constructs an Iobuf with the same contents as a string. The limits and\nwindow will be initially set to cover the whole string.",3,{"inputs":[{"name":"roiobuf"},{"name":"str"}],"output":{"name":"self"}}],[11,"from_str_copy","","Copies a `str` into a read-only Iobuf. The contents of the `str` will be\ncopied, so prefer to use the other constructors whenever possible.",3,{"inputs":[{"name":"roiobuf"},{"name":"str"}],"output":{"name":"self"}}],[11,"from_str_copy_with_allocator","","Copies a `str` into a read-only Iobuf, whose memory comes from the given\nallocator.",3,{"inputs":[{"name":"roiobuf"},{"name":"str"},{"name":"arc"}],"output":{"name":"roiobuf"}}],[11,"from_slice_copy","","Copies the contents of a slice into a read-only Iobuf. The contents of the\nslice will be copied, so prefer to use the other constructors whenever\npossible.",3,null],[11,"from_slice_copy_with_allocator","","Copies a byte vector into a new read-only Iobuf, whose memory comes from\nthe given allocator.",3,null],[11,"from_slice","","Constructs an Iobuf from a slice. The Iobuf will not copy the slice\ncontents, and therefore their lifetimes will be linked.",3,null],[11,"empty","","Constructs a trivially empty Iobuf, limits and window are 0, and there's\nan empty backing buffer. This will not allocate.",4,{"inputs":[{"name":"rwiobuf"}],"output":{"name":"rwiobuf"}}],[11,"new","","Constructs a new Iobuf with a buffer of size `len`, undefined contents,\nand the limits and window set to the full size of the buffer.",4,{"inputs":[{"name":"rwiobuf"},{"name":"usize"}],"output":{"name":"rwiobuf"}}],[11,"new_with_allocator","","Constructs a new Iobuf with a buffer of size `len`, undefined contents,\nand the limits and window set to the full range of the buffer. The memory\nwill be allocated out of the given allocator, instead of the global heap.",4,{"inputs":[{"name":"rwiobuf"},{"name":"usize"},{"name":"arc"}],"output":{"name":"rwiobuf"}}],[11,"from_str_copy","","Copies a `str` into a writeable Iobuf. The contents of the `str` will be\ncopied, so prefer to use the non-copying constructors whenever possible.",4,{"inputs":[{"name":"rwiobuf"},{"name":"str"}],"output":{"name":"rwiobuf"}}],[11,"from_str_copy_with_allocator","","Copies a `str` into a writeable Iobuf, whose memory comes from the given\nallocator.",4,{"inputs":[{"name":"rwiobuf"},{"name":"str"},{"name":"arc"}],"output":{"name":"rwiobuf"}}],[11,"from_slice","","Constructs an Iobuf from a slice. The Iobuf will not copy the slice\ncontents, and therefore their lifetimes will be linked.",4,null],[11,"from_slice_copy","","Copies a byte vector into a new, writeable Iobuf. The contents of the\nslice will be copied, so prefer to use the other constructors whenever\npossible.",4,null],[11,"from_slice_copy_with_allocator","","Copies a byte vector into a new writeable Iobuf, whose memory comes from\nthe given allocator.",4,null],[11,"as_mut_window_slice","","Reads the data in the window as a mutable slice. Note that since `&mut`\nin rust really means `&unique`, this function lies. There can exist\nmultiple slices of the same data. Therefore, this function is unsafe.",4,null],[11,"as_mut_limit_slice","","Reads the data in the window as a mutable slice. Note that since `&mut`\nin rust really means `&unique`, this function lies. There can exist\nmultiple slices of the same data. Therefore, this function is unsafe.",4,null],[11,"read_only","","Gets a read-only copy of this Iobuf. This is a very cheap operation, as\nthe backing buffers are shared. This can be useful for interfacing with\ncode that only accepts read-only Iobufs.",4,{"inputs":[{"name":"rwiobuf"}],"output":{"name":"roiobuf"}}],[11,"compact","","Copies data from the window to the lower limit fo the iobuf and sets the\nwindow to range from the end of the copied data to the upper limit. This\nis typically called after a series of `Consume`s to save unread data and\nprepare for the next series of `Fill`s and `flip_lo`s.",4,{"inputs":[{"name":"rwiobuf"}],"output":null}],[11,"poke","","Writes the bytes at a given offset from the beginning of the window, into\nthe supplied buffer. Either the entire buffer is copied, or an error is\nreturned because bytes outside of the window would be written.",4,null],[11,"poke_be","","Writes a big-endian primitive at a given offset from the beginning of the\nwindow.",4,{"inputs":[{"name":"rwiobuf"},{"name":"u32"},{"name":"t"}],"output":{"name":"result"}}],[11,"poke_le","","Writes a little-endian primitive at a given offset from the beginning of\nthe window.",4,{"inputs":[{"name":"rwiobuf"},{"name":"u32"},{"name":"t"}],"output":{"name":"result"}}],[11,"fill","","Writes bytes from the supplied buffer, starting from the front of the\nwindow. Either the entire buffer is copied, or an error is returned\nbecause bytes outside the window were requested.",4,null],[11,"fill_be","","Writes a big-endian primitive into the beginning of the window.",4,{"inputs":[{"name":"rwiobuf"},{"name":"t"}],"output":{"name":"result"}}],[11,"fill_le","","Writes a little-endian primitive into the beginning of the window.",4,{"inputs":[{"name":"rwiobuf"},{"name":"t"}],"output":{"name":"result"}}],[11,"unsafe_poke","","Writes the bytes at a given offset from the beginning of the window, into\nthe supplied buffer. It is undefined behavior to write outside the iobuf\nwindow.",4,null],[11,"unsafe_poke_be","","Writes a big-endian primitive at a given offset from the beginning of the\nwindow. It is undefined behavior to write outside the iobuf window.",4,{"inputs":[{"name":"rwiobuf"},{"name":"u32"},{"name":"t"}],"output":null}],[11,"unsafe_poke_le","","Writes a little-endian primitive at a given offset from the beginning of\nthe window. It is undefined behavior to write outside the iobuf window.",4,{"inputs":[{"name":"rwiobuf"},{"name":"u32"},{"name":"t"}],"output":null}],[11,"unsafe_fill","","Writes bytes from the supplied buffer, starting from the front of the\nwindow. It is undefined behavior to write outside the iobuf window.",4,null],[11,"unsafe_fill_be","","Writes a big-endian primitive into the beginning of the window. It is\nundefined behavior to write outside the iobuf window.",4,{"inputs":[{"name":"rwiobuf"},{"name":"t"}],"output":null}],[11,"unsafe_fill_le","","Writes a little-endian primitive into the beginning of the window. It is\nundefined behavior to write outside the iobuf window.",4,{"inputs":[{"name":"rwiobuf"},{"name":"t"}],"output":null}],[11,"read_only","","Stops atomically reference counting a unique buffer. This method returns\n`Ok` if the `AROIobuf` is the last of its kind, and `Err` if it's not.",5,{"inputs":[{"name":"aroiobuf"}],"output":{"name":"result"}}],[11,"read_write","","Stops atomically reference counting a unique buffer. This method returns\n`Ok` if the `AROIobuf` is the last of its kind, and `Err` if it's not.",5,{"inputs":[{"name":"aroiobuf"}],"output":{"name":"result"}}],[11,"deep_clone","","",3,{"inputs":[{"name":"roiobuf"}],"output":{"name":"rwiobuf"}}],[11,"deep_clone_with_allocator","","",3,{"inputs":[{"name":"roiobuf"},{"name":"arc"}],"output":{"name":"rwiobuf"}}],[11,"unique","","",3,{"inputs":[{"name":"roiobuf"}],"output":{"name":"result"}}],[11,"atomic_read_only","","",3,{"inputs":[{"name":"roiobuf"}],"output":{"name":"result"}}],[11,"len","","",3,{"inputs":[{"name":"roiobuf"}],"output":{"name":"u32"}}],[11,"cap","","",3,{"inputs":[{"name":"roiobuf"}],"output":{"name":"u32"}}],[11,"is_empty","","",3,{"inputs":[{"name":"roiobuf"}],"output":{"name":"bool"}}],[11,"as_window_slice","","",3,null],[11,"as_limit_slice","","",3,null],[11,"sub_window","","",3,{"inputs":[{"name":"roiobuf"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"sub_window_from","","",3,{"inputs":[{"name":"roiobuf"},{"name":"u32"}],"output":{"name":"result"}}],[11,"sub_window_to","","",3,{"inputs":[{"name":"roiobuf"},{"name":"u32"}],"output":{"name":"result"}}],[11,"unsafe_sub_window","","",3,{"inputs":[{"name":"roiobuf"},{"name":"u32"},{"name":"u32"}],"output":null}],[11,"unsafe_sub_window_from","","",3,{"inputs":[{"name":"roiobuf"},{"name":"u32"}],"output":null}],[11,"unsafe_sub_window_to","","",3,{"inputs":[{"name":"roiobuf"},{"name":"u32"}],"output":null}],[11,"sub","","",3,{"inputs":[{"name":"roiobuf"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"sub_from","","",3,{"inputs":[{"name":"roiobuf"},{"name":"u32"}],"output":{"name":"result"}}],[11,"sub_to","","",3,{"inputs":[{"name":"roiobuf"},{"name":"u32"}],"output":{"name":"result"}}],[11,"unsafe_sub","","",3,{"inputs":[{"name":"roiobuf"},{"name":"u32"},{"name":"u32"}],"output":null}],[11,"unsafe_sub_from","","",3,{"inputs":[{"name":"roiobuf"},{"name":"u32"}],"output":null}],[11,"unsafe_sub_to","","",3,{"inputs":[{"name":"roiobuf"},{"name":"u32"}],"output":null}],[11,"set_limits_and_window","","",3,null],[11,"narrow","","",3,{"inputs":[{"name":"roiobuf"}],"output":null}],[11,"advance","","",3,{"inputs":[{"name":"roiobuf"},{"name":"u32"}],"output":{"name":"result"}}],[11,"unsafe_advance","","",3,{"inputs":[{"name":"roiobuf"},{"name":"u32"}],"output":null}],[11,"extend","","",3,{"inputs":[{"name":"roiobuf"},{"name":"u32"}],"output":{"name":"result"}}],[11,"unsafe_extend","","",3,{"inputs":[{"name":"roiobuf"},{"name":"u32"}],"output":null}],[11,"is_extended_by","","",3,{"inputs":[{"name":"roiobuf"},{"name":"buf"}],"output":{"name":"bool"}}],[11,"extend_with","","",3,{"inputs":[{"name":"roiobuf"},{"name":"buf"}],"output":{"name":"result"}}],[11,"resize","","",3,{"inputs":[{"name":"roiobuf"},{"name":"u32"}],"output":{"name":"result"}}],[11,"unsafe_resize","","",3,{"inputs":[{"name":"roiobuf"},{"name":"u32"}],"output":null}],[11,"split_at","","",3,{"inputs":[{"name":"roiobuf"},{"name":"u32"}],"output":{"name":"result"}}],[11,"unsafe_split_at","","",3,null],[11,"split_start_at","","",3,{"inputs":[{"name":"roiobuf"},{"name":"u32"}],"output":{"name":"result"}}],[11,"unsafe_split_start_at","","",3,{"inputs":[{"name":"roiobuf"},{"name":"u32"}],"output":{"name":"self"}}],[11,"rewind","","",3,{"inputs":[{"name":"roiobuf"}],"output":null}],[11,"reset","","",3,{"inputs":[{"name":"roiobuf"}],"output":null}],[11,"flip_lo","","",3,{"inputs":[{"name":"roiobuf"}],"output":null}],[11,"flip_hi","","",3,{"inputs":[{"name":"roiobuf"}],"output":null}],[11,"lo_space","","",3,{"inputs":[{"name":"roiobuf"}],"output":{"name":"u32"}}],[11,"hi_space","","",3,{"inputs":[{"name":"roiobuf"}],"output":{"name":"u32"}}],[11,"peek","","",3,null],[11,"peek_be","","",3,{"inputs":[{"name":"roiobuf"},{"name":"u32"}],"output":{"name":"result"}}],[11,"peek_le","","",3,{"inputs":[{"name":"roiobuf"},{"name":"u32"}],"output":{"name":"result"}}],[11,"consume","","",3,null],[11,"consume_be","","",3,{"inputs":[{"name":"roiobuf"}],"output":{"name":"result"}}],[11,"consume_le","","",3,{"inputs":[{"name":"roiobuf"}],"output":{"name":"result"}}],[11,"check_range","","",3,{"inputs":[{"name":"roiobuf"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"check_range_usize","","",3,{"inputs":[{"name":"roiobuf"},{"name":"u32"},{"name":"usize"}],"output":{"name":"result"}}],[11,"check_range_fail","","",3,{"inputs":[{"name":"roiobuf"},{"name":"u32"},{"name":"u32"}],"output":null}],[11,"check_range_usize_fail","","",3,{"inputs":[{"name":"roiobuf"},{"name":"u32"},{"name":"usize"}],"output":null}],[11,"unsafe_peek","","",3,null],[11,"unsafe_peek_be","","",3,{"inputs":[{"name":"roiobuf"},{"name":"u32"}],"output":{"name":"t"}}],[11,"unsafe_peek_le","","",3,{"inputs":[{"name":"roiobuf"},{"name":"u32"}],"output":{"name":"t"}}],[11,"unsafe_consume","","",3,null],[11,"unsafe_consume_be","","",3,{"inputs":[{"name":"roiobuf"}],"output":{"name":"t"}}],[11,"unsafe_consume_le","","",3,{"inputs":[{"name":"roiobuf"}],"output":{"name":"t"}}],[11,"as_raw","","",3,{"inputs":[{"name":"roiobuf"}],"output":{"name":"rawiobuf"}}],[11,"invariant","","",3,{"inputs":[{"name":"roiobuf"}],"output":{"name":"result"}}],[11,"ptr","","",3,{"inputs":[{"name":"roiobuf"}],"output":{"name":"nonzero"}}],[11,"is_owned","","",3,{"inputs":[{"name":"roiobuf"}],"output":{"name":"bool"}}],[11,"lo_min","","",3,{"inputs":[{"name":"roiobuf"}],"output":{"name":"u32"}}],[11,"lo","","",3,{"inputs":[{"name":"roiobuf"}],"output":{"name":"u32"}}],[11,"hi","","",3,{"inputs":[{"name":"roiobuf"}],"output":{"name":"u32"}}],[11,"hi_max","","",3,{"inputs":[{"name":"roiobuf"}],"output":{"name":"u32"}}],[11,"deep_clone","","",5,{"inputs":[{"name":"aroiobuf"}],"output":{"name":"rwiobuf"}}],[11,"deep_clone_with_allocator","","",5,{"inputs":[{"name":"aroiobuf"},{"name":"arc"}],"output":{"name":"rwiobuf"}}],[11,"unique","","",5,{"inputs":[{"name":"aroiobuf"}],"output":{"name":"result"}}],[11,"atomic_read_only","","",5,{"inputs":[{"name":"aroiobuf"}],"output":{"name":"result"}}],[11,"len","","",5,{"inputs":[{"name":"aroiobuf"}],"output":{"name":"u32"}}],[11,"cap","","",5,{"inputs":[{"name":"aroiobuf"}],"output":{"name":"u32"}}],[11,"is_empty","","",5,{"inputs":[{"name":"aroiobuf"}],"output":{"name":"bool"}}],[11,"as_window_slice","","",5,null],[11,"as_limit_slice","","",5,null],[11,"sub_window","","",5,{"inputs":[{"name":"aroiobuf"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"sub_window_from","","",5,{"inputs":[{"name":"aroiobuf"},{"name":"u32"}],"output":{"name":"result"}}],[11,"sub_window_to","","",5,{"inputs":[{"name":"aroiobuf"},{"name":"u32"}],"output":{"name":"result"}}],[11,"unsafe_sub_window","","",5,{"inputs":[{"name":"aroiobuf"},{"name":"u32"},{"name":"u32"}],"output":null}],[11,"unsafe_sub_window_from","","",5,{"inputs":[{"name":"aroiobuf"},{"name":"u32"}],"output":null}],[11,"unsafe_sub_window_to","","",5,{"inputs":[{"name":"aroiobuf"},{"name":"u32"}],"output":null}],[11,"sub","","",5,{"inputs":[{"name":"aroiobuf"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"sub_from","","",5,{"inputs":[{"name":"aroiobuf"},{"name":"u32"}],"output":{"name":"result"}}],[11,"sub_to","","",5,{"inputs":[{"name":"aroiobuf"},{"name":"u32"}],"output":{"name":"result"}}],[11,"unsafe_sub","","",5,{"inputs":[{"name":"aroiobuf"},{"name":"u32"},{"name":"u32"}],"output":null}],[11,"unsafe_sub_from","","",5,{"inputs":[{"name":"aroiobuf"},{"name":"u32"}],"output":null}],[11,"unsafe_sub_to","","",5,{"inputs":[{"name":"aroiobuf"},{"name":"u32"}],"output":null}],[11,"set_limits_and_window","","",5,null],[11,"narrow","","",5,{"inputs":[{"name":"aroiobuf"}],"output":null}],[11,"advance","","",5,{"inputs":[{"name":"aroiobuf"},{"name":"u32"}],"output":{"name":"result"}}],[11,"unsafe_advance","","",5,{"inputs":[{"name":"aroiobuf"},{"name":"u32"}],"output":null}],[11,"extend","","",5,{"inputs":[{"name":"aroiobuf"},{"name":"u32"}],"output":{"name":"result"}}],[11,"unsafe_extend","","",5,{"inputs":[{"name":"aroiobuf"},{"name":"u32"}],"output":null}],[11,"is_extended_by","","",5,{"inputs":[{"name":"aroiobuf"},{"name":"buf"}],"output":{"name":"bool"}}],[11,"extend_with","","",5,{"inputs":[{"name":"aroiobuf"},{"name":"buf"}],"output":{"name":"result"}}],[11,"resize","","",5,{"inputs":[{"name":"aroiobuf"},{"name":"u32"}],"output":{"name":"result"}}],[11,"unsafe_resize","","",5,{"inputs":[{"name":"aroiobuf"},{"name":"u32"}],"output":null}],[11,"split_at","","",5,{"inputs":[{"name":"aroiobuf"},{"name":"u32"}],"output":{"name":"result"}}],[11,"unsafe_split_at","","",5,null],[11,"split_start_at","","",5,{"inputs":[{"name":"aroiobuf"},{"name":"u32"}],"output":{"name":"result"}}],[11,"unsafe_split_start_at","","",5,{"inputs":[{"name":"aroiobuf"},{"name":"u32"}],"output":{"name":"self"}}],[11,"rewind","","",5,{"inputs":[{"name":"aroiobuf"}],"output":null}],[11,"reset","","",5,{"inputs":[{"name":"aroiobuf"}],"output":null}],[11,"flip_lo","","",5,{"inputs":[{"name":"aroiobuf"}],"output":null}],[11,"flip_hi","","",5,{"inputs":[{"name":"aroiobuf"}],"output":null}],[11,"lo_space","","",5,{"inputs":[{"name":"aroiobuf"}],"output":{"name":"u32"}}],[11,"hi_space","","",5,{"inputs":[{"name":"aroiobuf"}],"output":{"name":"u32"}}],[11,"peek","","",5,null],[11,"peek_be","","",5,{"inputs":[{"name":"aroiobuf"},{"name":"u32"}],"output":{"name":"result"}}],[11,"peek_le","","",5,{"inputs":[{"name":"aroiobuf"},{"name":"u32"}],"output":{"name":"result"}}],[11,"consume","","",5,null],[11,"consume_be","","",5,{"inputs":[{"name":"aroiobuf"}],"output":{"name":"result"}}],[11,"consume_le","","",5,{"inputs":[{"name":"aroiobuf"}],"output":{"name":"result"}}],[11,"check_range","","",5,{"inputs":[{"name":"aroiobuf"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"check_range_usize","","",5,{"inputs":[{"name":"aroiobuf"},{"name":"u32"},{"name":"usize"}],"output":{"name":"result"}}],[11,"check_range_fail","","",5,{"inputs":[{"name":"aroiobuf"},{"name":"u32"},{"name":"u32"}],"output":null}],[11,"check_range_usize_fail","","",5,{"inputs":[{"name":"aroiobuf"},{"name":"u32"},{"name":"usize"}],"output":null}],[11,"unsafe_peek","","",5,null],[11,"unsafe_peek_be","","",5,{"inputs":[{"name":"aroiobuf"},{"name":"u32"}],"output":{"name":"t"}}],[11,"unsafe_peek_le","","",5,{"inputs":[{"name":"aroiobuf"},{"name":"u32"}],"output":{"name":"t"}}],[11,"unsafe_consume","","",5,null],[11,"unsafe_consume_be","","",5,{"inputs":[{"name":"aroiobuf"}],"output":{"name":"t"}}],[11,"unsafe_consume_le","","",5,{"inputs":[{"name":"aroiobuf"}],"output":{"name":"t"}}],[11,"as_raw","","",5,{"inputs":[{"name":"aroiobuf"}],"output":{"name":"rawiobuf"}}],[11,"invariant","","",5,{"inputs":[{"name":"aroiobuf"}],"output":{"name":"result"}}],[11,"ptr","","",5,{"inputs":[{"name":"aroiobuf"}],"output":{"name":"nonzero"}}],[11,"is_owned","","",5,{"inputs":[{"name":"aroiobuf"}],"output":{"name":"bool"}}],[11,"lo_min","","",5,{"inputs":[{"name":"aroiobuf"}],"output":{"name":"u32"}}],[11,"lo","","",5,{"inputs":[{"name":"aroiobuf"}],"output":{"name":"u32"}}],[11,"hi","","",5,{"inputs":[{"name":"aroiobuf"}],"output":{"name":"u32"}}],[11,"hi_max","","",5,{"inputs":[{"name":"aroiobuf"}],"output":{"name":"u32"}}],[11,"deep_clone","","",4,{"inputs":[{"name":"rwiobuf"}],"output":{"name":"rwiobuf"}}],[11,"deep_clone_with_allocator","","",4,{"inputs":[{"name":"rwiobuf"},{"name":"arc"}],"output":{"name":"rwiobuf"}}],[11,"unique","","",4,{"inputs":[{"name":"rwiobuf"}],"output":{"name":"result"}}],[11,"atomic_read_only","","",4,{"inputs":[{"name":"rwiobuf"}],"output":{"name":"result"}}],[11,"len","","",4,{"inputs":[{"name":"rwiobuf"}],"output":{"name":"u32"}}],[11,"cap","","",4,{"inputs":[{"name":"rwiobuf"}],"output":{"name":"u32"}}],[11,"is_empty","","",4,{"inputs":[{"name":"rwiobuf"}],"output":{"name":"bool"}}],[11,"as_window_slice","","",4,null],[11,"as_limit_slice","","",4,null],[11,"sub_window","","",4,{"inputs":[{"name":"rwiobuf"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"sub_window_from","","",4,{"inputs":[{"name":"rwiobuf"},{"name":"u32"}],"output":{"name":"result"}}],[11,"sub_window_to","","",4,{"inputs":[{"name":"rwiobuf"},{"name":"u32"}],"output":{"name":"result"}}],[11,"unsafe_sub_window","","",4,{"inputs":[{"name":"rwiobuf"},{"name":"u32"},{"name":"u32"}],"output":null}],[11,"unsafe_sub_window_from","","",4,{"inputs":[{"name":"rwiobuf"},{"name":"u32"}],"output":null}],[11,"unsafe_sub_window_to","","",4,{"inputs":[{"name":"rwiobuf"},{"name":"u32"}],"output":null}],[11,"sub","","",4,{"inputs":[{"name":"rwiobuf"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"sub_from","","",4,{"inputs":[{"name":"rwiobuf"},{"name":"u32"}],"output":{"name":"result"}}],[11,"sub_to","","",4,{"inputs":[{"name":"rwiobuf"},{"name":"u32"}],"output":{"name":"result"}}],[11,"unsafe_sub","","",4,{"inputs":[{"name":"rwiobuf"},{"name":"u32"},{"name":"u32"}],"output":null}],[11,"unsafe_sub_from","","",4,{"inputs":[{"name":"rwiobuf"},{"name":"u32"}],"output":null}],[11,"unsafe_sub_to","","",4,{"inputs":[{"name":"rwiobuf"},{"name":"u32"}],"output":null}],[11,"set_limits_and_window","","",4,null],[11,"narrow","","",4,{"inputs":[{"name":"rwiobuf"}],"output":null}],[11,"advance","","",4,{"inputs":[{"name":"rwiobuf"},{"name":"u32"}],"output":{"name":"result"}}],[11,"unsafe_advance","","",4,{"inputs":[{"name":"rwiobuf"},{"name":"u32"}],"output":null}],[11,"extend","","",4,{"inputs":[{"name":"rwiobuf"},{"name":"u32"}],"output":{"name":"result"}}],[11,"unsafe_extend","","",4,{"inputs":[{"name":"rwiobuf"},{"name":"u32"}],"output":null}],[11,"is_extended_by","","",4,{"inputs":[{"name":"rwiobuf"},{"name":"buf"}],"output":{"name":"bool"}}],[11,"extend_with","","",4,{"inputs":[{"name":"rwiobuf"},{"name":"buf"}],"output":{"name":"result"}}],[11,"resize","","",4,{"inputs":[{"name":"rwiobuf"},{"name":"u32"}],"output":{"name":"result"}}],[11,"unsafe_resize","","",4,{"inputs":[{"name":"rwiobuf"},{"name":"u32"}],"output":null}],[11,"split_at","","",4,{"inputs":[{"name":"rwiobuf"},{"name":"u32"}],"output":{"name":"result"}}],[11,"unsafe_split_at","","",4,null],[11,"split_start_at","","",4,{"inputs":[{"name":"rwiobuf"},{"name":"u32"}],"output":{"name":"result"}}],[11,"unsafe_split_start_at","","",4,{"inputs":[{"name":"rwiobuf"},{"name":"u32"}],"output":{"name":"self"}}],[11,"rewind","","",4,{"inputs":[{"name":"rwiobuf"}],"output":null}],[11,"reset","","",4,{"inputs":[{"name":"rwiobuf"}],"output":null}],[11,"flip_lo","","",4,{"inputs":[{"name":"rwiobuf"}],"output":null}],[11,"flip_hi","","",4,{"inputs":[{"name":"rwiobuf"}],"output":null}],[11,"lo_space","","",4,{"inputs":[{"name":"rwiobuf"}],"output":{"name":"u32"}}],[11,"hi_space","","",4,{"inputs":[{"name":"rwiobuf"}],"output":{"name":"u32"}}],[11,"peek","","",4,null],[11,"peek_be","","",4,{"inputs":[{"name":"rwiobuf"},{"name":"u32"}],"output":{"name":"result"}}],[11,"peek_le","","",4,{"inputs":[{"name":"rwiobuf"},{"name":"u32"}],"output":{"name":"result"}}],[11,"consume","","",4,null],[11,"consume_be","","",4,{"inputs":[{"name":"rwiobuf"}],"output":{"name":"result"}}],[11,"consume_le","","",4,{"inputs":[{"name":"rwiobuf"}],"output":{"name":"result"}}],[11,"check_range","","",4,{"inputs":[{"name":"rwiobuf"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"check_range_usize","","",4,{"inputs":[{"name":"rwiobuf"},{"name":"u32"},{"name":"usize"}],"output":{"name":"result"}}],[11,"check_range_fail","","",4,{"inputs":[{"name":"rwiobuf"},{"name":"u32"},{"name":"u32"}],"output":null}],[11,"check_range_usize_fail","","",4,{"inputs":[{"name":"rwiobuf"},{"name":"u32"},{"name":"usize"}],"output":null}],[11,"unsafe_peek","","",4,null],[11,"unsafe_peek_be","","",4,{"inputs":[{"name":"rwiobuf"},{"name":"u32"}],"output":{"name":"t"}}],[11,"unsafe_peek_le","","",4,{"inputs":[{"name":"rwiobuf"},{"name":"u32"}],"output":{"name":"t"}}],[11,"unsafe_consume","","",4,null],[11,"unsafe_consume_be","","",4,{"inputs":[{"name":"rwiobuf"}],"output":{"name":"t"}}],[11,"unsafe_consume_le","","",4,{"inputs":[{"name":"rwiobuf"}],"output":{"name":"t"}}],[11,"as_raw","","",4,{"inputs":[{"name":"rwiobuf"}],"output":{"name":"rawiobuf"}}],[11,"invariant","","",4,{"inputs":[{"name":"rwiobuf"}],"output":{"name":"result"}}],[11,"ptr","","",4,{"inputs":[{"name":"rwiobuf"}],"output":{"name":"nonzero"}}],[11,"is_owned","","",4,{"inputs":[{"name":"rwiobuf"}],"output":{"name":"bool"}}],[11,"lo_min","","",4,{"inputs":[{"name":"rwiobuf"}],"output":{"name":"u32"}}],[11,"lo","","",4,{"inputs":[{"name":"rwiobuf"}],"output":{"name":"u32"}}],[11,"hi","","",4,{"inputs":[{"name":"rwiobuf"}],"output":{"name":"u32"}}],[11,"hi_max","","",4,{"inputs":[{"name":"rwiobuf"}],"output":{"name":"u32"}}],[11,"fmt","","",3,{"inputs":[{"name":"roiobuf"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"rwiobuf"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"aroiobuf"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"uniqueiobuf"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new ring buffer, with room for `cap` bytes.",7,{"inputs":[{"name":"ioringbuf"},{"name":"usize"}],"output":{"name":"self"}}],[11,"push_buf","","Returns an Iobuf, whose window may be filled with new data. This acts as\nthe \"push\" operations for the ringbuf.",7,{"inputs":[{"name":"ioringbuf"}],"output":{"name":"rwiobuf"}}],[11,"pop_buf","","Returns an Iobuf, whose window may be have data `consume`d out of it. This\nacts as the \"pop\" operation for the ringbuf.",7,{"inputs":[{"name":"ioringbuf"}],"output":{"name":"roiobuf"}}],[11,"is_empty","","`true` if there is no data to pop in the Iobuf.",7,{"inputs":[{"name":"ioringbuf"}],"output":{"name":"bool"}}],[11,"is_full","","`true` if there is no room for new data in the Iobuf.",7,{"inputs":[{"name":"ioringbuf"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"bufspan"}],"output":{"name":"bufspan"}}],[11,"fmt","","",0,{"inputs":[{"name":"bufspan"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_iter","","",0,{"inputs":[{"name":"bufspan"},{"name":"t"}],"output":{"name":"self"}}],[11,"extend","","",0,{"inputs":[{"name":"bufspan"},{"name":"i"}],"output":null}],[11,"into_iter","","",0,{"inputs":[{"name":"bufspan"}],"output":{"name":"spanmoveiter"}}],[11,"new","","Creates a new, empty `Bufspan`.",0,{"inputs":[{"name":"bufspan"}],"output":{"name":"self"}}],[11,"from_buf","","Creates a new `BufSpan` from an Iobuf.",0,{"inputs":[{"name":"bufspan"},{"name":"buf"}],"output":{"name":"self"}}],[11,"is_empty","","Returns `true` iff the span is over an empty range.",0,{"inputs":[{"name":"bufspan"}],"output":{"name":"bool"}}],[11,"push","","Appends a buffer to a `BufSpan`. If the buffer is an extension of the\npreviously pushed buffer, the range will be extended. Otherwise, the new\nnon-extension buffer will be added to the end of a vector.",0,{"inputs":[{"name":"bufspan"},{"name":"buf"}],"output":null}],[11,"iter_bytes","","Returns an iterator over the bytes in the `BufSpan`.",0,{"inputs":[{"name":"bufspan"}],"output":{"name":"byteiter"}}],[11,"byte_equal","","Returns `true` iff the bytes in this `BufSpan` are the same as the bytes\nin the other `BufSpan`.",0,{"inputs":[{"name":"bufspan"},{"name":"bufspan"}],"output":{"name":"bool"}}],[11,"byte_equal_slice","","A more efficient version of byte_equal, specialized to work exclusively on\nslices.",0,null],[11,"count_bytes","","Counts the number of bytes this `BufSpan` is over. This is\n`O(self.into_iter().len())`.",0,{"inputs":[{"name":"bufspan"}],"output":{"name":"usize"}}],[11,"count_bytes_cmp","","Compares the number of bytes in this span with another number, returning\nhow they compare. This is more efficient than calling `count_bytes` and\ncomparing that result, since we might be able to avoid iterating over all\nthe buffers.",0,{"inputs":[{"name":"bufspan"},{"name":"usize"}],"output":{"name":"ordering"}}],[11,"append","","Extends this span to include the range denoted by another span.",0,{"inputs":[{"name":"bufspan"},{"name":"self"}],"output":null}],[11,"starts_with","","Returns `true` if the span begins with the given bytes.",0,null],[11,"ends_with","","Returns `true` if the span ends with the given bytes.",0,null],[11,"eq","","",0,{"inputs":[{"name":"bufspan"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"bufspan"},{"name":"self"}],"output":{"name":"option"}}],[11,"cmp","","",0,{"inputs":[{"name":"bufspan"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"next","","",1,{"inputs":[{"name":"spaniter"}],"output":{"name":"option"}}],[11,"size_hint","","",1,null],[11,"next_back","","",1,{"inputs":[{"name":"spaniter"}],"output":{"name":"option"}}],[11,"next","","",2,{"inputs":[{"name":"spanmoveiter"}],"output":{"name":"option"}}],[11,"size_hint","","",2,null],[11,"next_back","","",2,{"inputs":[{"name":"spanmoveiter"}],"output":{"name":"option"}}],[11,"empty","","Constructs a trivially empty Iobuf, limits and window are 0, and there's\nan empty backing buffer. This will not allocate.",8,{"inputs":[{"name":"appendbuf"}],"output":{"name":"appendbuf"}}],[11,"new","","Constructs a new Iobuf with a buffer of size `len`, undefined contents,\nand the limits and window set to the full size of the buffer.",8,{"inputs":[{"name":"appendbuf"},{"name":"usize"}],"output":{"name":"appendbuf"}}],[11,"new_with_allocator","","Constructs a new Iobuf with a buffer of size `len`, undefined contents,\nand the limits and window set to the full range of the buffer. The memory\nwill be allocated out of the given allocator, instead of the global heap.",8,{"inputs":[{"name":"appendbuf"},{"name":"usize"},{"name":"arc"}],"output":{"name":"appendbuf"}}],[11,"atomic_slice","","Creates an AROIobuf as a slice of written buffer. This is space that preceeds\nthe window in the buffer, or, more specifically, between the lo_min and lo offsets.\nThis guarantees that the AROIobuf can be thought of as safely immutable while this\nbuffer can continue to be `fill`ed and `poke`d. There are no operations for this buffer\nto reset the window to a lower position in the buffer.\nlen is the number of bytes back from the start of the window where the slice begins\n (and also the length of the slice)",8,{"inputs":[{"name":"appendbuf"},{"name":"i32"},{"name":"i32"}],"output":{"name":"result"}}],[11,"atomic_slice_from","","Creates an AROIobuf as a slice of written buffer. This is space that preceeds\nthe window in the buffer, or, more specifically, between the lo_min and lo offsets.\nThis guarantees that the AROIobuf can be thought of as safely immutable while this\nbuffer can continue to be `fill`ed and `poke`d. There are no operations for this buffer\nto reset the window to a lower position in the buffer.\nlen is the number of bytes back from the start of the window where the slice begins\n (and also the length of the slice)",8,{"inputs":[{"name":"appendbuf"},{"name":"i32"}],"output":{"name":"result"}}],[11,"atomic_slice_to","","Creates an AROIobuf as a slice of written buffer. This is space that preceeds\nthe window in the buffer, or, more specifically, between the lo_min and lo offsets.\nThis guarantees that the AROIobuf can be thought of as safely immutable while this\nbuffer can continue to be `fill`ed and `poke`d. There are no operations for this buffer\nto reset the window to a lower position in the buffer.\nlen is the number of bytes back from the start of the window where the slice begins\n (and also the length of the slice)",8,{"inputs":[{"name":"appendbuf"},{"name":"i32"}],"output":{"name":"result"}}],[11,"as_mut_window_slice","","Reads the data in the window as a mutable slice.",8,null],[11,"as_window_slice","","Provides an immutable slice into the window of the buffer",8,null],[11,"as_limit_slice","","Provides an immutable slice into the entire usable space\nof the buffer",8,null],[11,"poke","","Writes the bytes at a given offset from the beginning of the window, into\nthe supplied buffer. Either the entire buffer is copied, or an error is\nreturned because bytes outside of the window would be written.",8,null],[11,"poke_be","","Writes a big-endian primitive at a given offset from the beginning of the\nwindow.",8,{"inputs":[{"name":"appendbuf"},{"name":"u32"},{"name":"t"}],"output":{"name":"result"}}],[11,"poke_le","","Writes a little-endian primitive at a given offset from the beginning of\nthe window.",8,{"inputs":[{"name":"appendbuf"},{"name":"u32"},{"name":"t"}],"output":{"name":"result"}}],[11,"fill","","Writes bytes from the supplied buffer, starting from the front of the\nwindow. Either the entire buffer is copied, or an error is returned\nbecause bytes outside the window were requested.",8,null],[11,"fill_be","","Writes a big-endian primitive into the beginning of the window.",8,{"inputs":[{"name":"appendbuf"},{"name":"t"}],"output":{"name":"result"}}],[11,"fill_le","","Writes a little-endian primitive into the beginning of the window.",8,{"inputs":[{"name":"appendbuf"},{"name":"t"}],"output":{"name":"result"}}],[11,"advance","","Advances the lower bound of the window by `len`. `Err(())` will be\nreturned if you advance past the upper bound of the window.",8,{"inputs":[{"name":"appendbuf"},{"name":"u32"}],"output":{"name":"result"}}],[11,"reset","","Sets the window to the limits.",8,{"inputs":[{"name":"appendbuf"}],"output":{"name":"result"}}],[11,"len","","Returns the capacity of the current writing window",8,{"inputs":[{"name":"appendbuf"}],"output":{"name":"u32"}}],[11,"cap","","Returns the capacity of the entire buffer, written or not",8,{"inputs":[{"name":"appendbuf"}],"output":{"name":"u32"}}],[11,"is_empty","","Returns whether or not `len() == 0`.",8,{"inputs":[{"name":"appendbuf"}],"output":{"name":"bool"}}],[11,"invariant","","Checks internal state of the AppendBuf, to ensure that internal invariants\nare satisified. Returns `Err(msg)` if any invariant isn't satisfied.",8,{"inputs":[{"name":"appendbuf"}],"output":{"name":"result"}}],[11,"as_raw","","For internal use only.",8,{"inputs":[{"name":"appendbuf"}],"output":{"name":"rawiobuf"}}],[11,"fmt","","",8,{"inputs":[{"name":"appendbuf"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",8,{"inputs":[{"name":"appendbuf"}],"output":null}],[11,"write","","",8,null],[11,"flush","","",8,{"inputs":[{"name":"appendbuf"}],"output":{"name":"result"}}],[6,"ByteIter","","An iterator over the bytes in a `BufSpan`.",null,null],[8,"IntLike","","8-64 bit integer types. Not floating point.",null,null],[8,"Allocator","","Used to provide custom memory to Iobufs, instead of just using the heap.",null,null],[10,"allocate","","Allocates `len` bytes of memory, with an alignment of `align`.",9,null],[10,"deallocate","","Deallocates memory allocated by `allocate`.",9,{"inputs":[{"name":"allocator"},{"name":"nonzero"},{"name":"usize"},{"name":"usize"}],"output":null}],[8,"Iobuf","","Input/Output Buffer",null,null],[10,"deep_clone","","Copies the data byte-by-byte in the Iobuf into a new, writeable Iobuf.\nThe new Iobuf and the old Iobuf will not share storage.",10,{"inputs":[{"name":"iobuf"}],"output":{"name":"rwiobuf"}}],[10,"deep_clone_with_allocator","","Copies the data byte-by-byte in the Iobuf into a new, writable Iobuf.\nThe new Iobuf will have storage allocated out of `allocator`, and will not\nshare the buffer with the original Iobuf.",10,{"inputs":[{"name":"iobuf"},{"name":"arc"}],"output":{"name":"rwiobuf"}}],[10,"unique","","Returns `Ok` if the Iobuf is the last to reference the underlying data,\nand converts it to a `UniqueIobuf` for sending to another task. This can\nalso be used to safely convert from a `ROIobuf` to a `RWIobuf`, and to\ndowngrade atomically refcounted Iobufs to non-atomically refcounted ones.",10,{"inputs":[{"name":"iobuf"}],"output":{"name":"result"}}],[10,"atomic_read_only","","Returns `Ok` if the Iobuf is the last to reference the underlying data,\nand upgrades it to an `AROIobuf` which can be sent over channels and\n`Arc`ed with impunity. This is extremely useful in situations where Iobufs\nare created and written in one thread, and consumed in another.",10,{"inputs":[{"name":"iobuf"}],"output":{"name":"result"}}],[10,"len","","Returns the size of the window.",10,{"inputs":[{"name":"iobuf"}],"output":{"name":"u32"}}],[10,"cap","","Returns the size of the limits. The capacity of an iobuf can be reduced\nvia `narrow`.",10,{"inputs":[{"name":"iobuf"}],"output":{"name":"u32"}}],[10,"is_empty","","`true` if `len() == 0`.",10,{"inputs":[{"name":"iobuf"}],"output":{"name":"bool"}}],[10,"as_window_slice","","Reads the data in the window as an immutable slice. Note that `Peek`s\nand `Poke`s into the iobuf will change the contents of the slice, even\nthough it advertises itself as immutable. Therefore, this function is\n`unsafe`.",10,null],[10,"as_limit_slice","","Reads the data in the limits as an immutable slice. Note that `Peek`s\nand `Poke`s into the iobuf will change the contents of the slice, even\nthough it advertises itself as immutable. Therefore, this function is\n`unsafe`.",10,null],[10,"sub_window","","Changes the Iobuf's bounds to the subrange specified by `pos` and `len`,\nwhich must lie within the current window.",10,{"inputs":[{"name":"iobuf"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[10,"sub_window_from","","Changes the Iobuf's bounds to start at `pos`, and go to the end of the\ncurrent window.",10,{"inputs":[{"name":"iobuf"},{"name":"u32"}],"output":{"name":"result"}}],[10,"sub_window_to","","Changes the Iobuf's bounds to extend for only `len` bytes.",10,{"inputs":[{"name":"iobuf"},{"name":"u32"}],"output":{"name":"result"}}],[10,"unsafe_sub_window","","The same as `sub_window`, but no bounds checks are performed. You should\nprobably just use `sub_window`.",10,{"inputs":[{"name":"iobuf"},{"name":"u32"},{"name":"u32"}],"output":null}],[10,"unsafe_sub_window_from","","The same as `sub_window_from`, but no bounds checks are performed. You\nshould probably just use `sub_window_from`.",10,{"inputs":[{"name":"iobuf"},{"name":"u32"}],"output":null}],[10,"unsafe_sub_window_to","","The same as `sub_window_to`, but no bounds checks are performed. You\nshould probably just use `sub_window_to`.",10,{"inputs":[{"name":"iobuf"},{"name":"u32"}],"output":null}],[10,"sub","","Changes the Iobuf's limits and bounds to the subrange specified by\n`pos` and `len`, which must lie within the current window.",10,{"inputs":[{"name":"iobuf"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[10,"sub_from","","Changes the Iobuf's limits and bounds to start from `pos` and extend to\nthe end of the current window.",10,{"inputs":[{"name":"iobuf"},{"name":"u32"}],"output":{"name":"result"}}],[10,"sub_to","","Changes the Iobuf's limits and bounds to start at the beginning of the\ncurrent window, and extend for `len` bytes.",10,{"inputs":[{"name":"iobuf"},{"name":"u32"}],"output":{"name":"result"}}],[10,"unsafe_sub","","The same as `sub`, but no bounds checks are performed. You should probably\njust use `sub`.",10,{"inputs":[{"name":"iobuf"},{"name":"u32"},{"name":"u32"}],"output":null}],[10,"unsafe_sub_from","","The same as `sub_from`, but no bounds checks are performed. You should\nprobably just use `sub_from`.",10,{"inputs":[{"name":"iobuf"},{"name":"u32"}],"output":null}],[10,"unsafe_sub_to","","The same as `sub_to`, but no bounds checks are performed. You should\nprobably just use `sub_to`.",10,{"inputs":[{"name":"iobuf"},{"name":"u32"}],"output":null}],[10,"set_limits_and_window","","Overrides the existing limits and window of the Iobuf, returning `Err(())`\nif attempting to widen either of them.",10,null],[10,"narrow","","Sets the limits to the current window.",10,{"inputs":[{"name":"iobuf"}],"output":null}],[10,"advance","","Advances the lower bound of the window by `len`. `Err(())` will be\nreturned if you advance past the upper bound of the window.",10,{"inputs":[{"name":"iobuf"},{"name":"u32"}],"output":{"name":"result"}}],[10,"unsafe_advance","","Advances the lower bound of the window by `len`. No bounds checking will\nbe performed.",10,{"inputs":[{"name":"iobuf"},{"name":"u32"}],"output":null}],[10,"extend","","Advances the upper bound of the window by `len`. `Err(())` will be\nreturned if you advance past the upper limit.",10,{"inputs":[{"name":"iobuf"},{"name":"u32"}],"output":{"name":"result"}}],[10,"unsafe_extend","","Advances the upper bound of the window by `len`. No bounds checking will\nbe performed.",10,{"inputs":[{"name":"iobuf"},{"name":"u32"}],"output":null}],[10,"is_extended_by","","Returns `true` if the `other` Iobuf's window is the region directly after\nour window. This does not inspect the buffer -- it only compares raw\npointers.",10,{"inputs":[{"name":"iobuf"},{"name":"buf"}],"output":{"name":"bool"}}],[10,"extend_with","","Attempts to extend an Iobuf with the contents of another Iobuf. If this\nIobuf's window is not the region directly before the other Iobuf's window,\nno extension will be performed and `Err(())` will be returned. If the\noperation was successful, `Ok(())` will be returned.",10,{"inputs":[{"name":"iobuf"},{"name":"buf"}],"output":{"name":"result"}}],[10,"resize","","Sets the length of the window, provided it does not exceed the limits.",10,{"inputs":[{"name":"iobuf"},{"name":"u32"}],"output":{"name":"result"}}],[10,"unsafe_resize","","Sets the length of the window. No bounds checking will be performed.",10,{"inputs":[{"name":"iobuf"},{"name":"u32"}],"output":null}],[10,"split_at","","Splits an Iobuf around an index.",10,{"inputs":[{"name":"iobuf"},{"name":"u32"}],"output":{"name":"result"}}],[10,"unsafe_split_at","","Like `split_at`, but does not perform bounds checking.",10,null],[10,"split_start_at","","Splits out the start of an Iobuf at an index.",10,{"inputs":[{"name":"iobuf"},{"name":"u32"}],"output":{"name":"result"}}],[10,"unsafe_split_start_at","","Like `split_start_at`, but does not perform bounds checking.",10,{"inputs":[{"name":"iobuf"},{"name":"u32"}],"output":{"name":"self"}}],[10,"rewind","","Sets the lower bound of the window to the lower limit.",10,{"inputs":[{"name":"iobuf"}],"output":null}],[10,"reset","","Sets the window to the limits.",10,{"inputs":[{"name":"iobuf"}],"output":null}],[10,"flip_lo","","Sets the window to range from the lower limit to the lower bound of the\nold window. This is typically called after a series of `Fill`s, to\nreposition the window in preparation to `Consume` the newly written data.",10,{"inputs":[{"name":"iobuf"}],"output":null}],[10,"flip_hi","","Sets the window to range from the upper bound of the old window to the\nupper limit. This is a dual to `flip_lo`, and is typically called when the\ndata in the current (narrowed) window has been processed and the window\nneeds to be positioned over the remaining data in the buffer.",10,{"inputs":[{"name":"iobuf"}],"output":null}],[10,"lo_space","","Returns the number of bytes between the lower limit and the lower bound.",10,{"inputs":[{"name":"iobuf"}],"output":{"name":"u32"}}],[10,"hi_space","","Returns the number of bytes between the upper bound and the upper limit.",10,{"inputs":[{"name":"iobuf"}],"output":{"name":"u32"}}],[10,"peek","","Reads the bytes at a given offset from the beginning of the window, into\nthe supplied buffer. Either the entire buffer is filled, or an error is\nreturned because bytes outside of the window were requested.",10,null],[10,"peek_be","","Reads a big-endian primitive at a given offset from the beginning of the\nwindow.",10,{"inputs":[{"name":"iobuf"},{"name":"u32"}],"output":{"name":"result"}}],[10,"peek_le","","Reads a little-endian primitive at a given offset from the beginning of\nthe window.",10,{"inputs":[{"name":"iobuf"},{"name":"u32"}],"output":{"name":"result"}}],[10,"consume","","Reads bytes, starting from the front of the window, into the supplied\nbuffer. Either the entire buffer is filled, or an error is returned\nbecause bytes outside the window were requested.",10,null],[10,"consume_be","","Reads a big-endian primitive from the beginning of the window.",10,{"inputs":[{"name":"iobuf"}],"output":{"name":"result"}}],[10,"consume_le","","Reads a little-endian primitive from the beginning of the window.",10,{"inputs":[{"name":"iobuf"}],"output":{"name":"result"}}],[10,"check_range","","Returns an `Err(())` if the `len` bytes, starting at `pos`, are not all\nin the window. To be used with the `try!` macro.",10,{"inputs":[{"name":"iobuf"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[10,"check_range_usize","","The same as `check_range`, but with a `usize` length. If you're checking\nthe range of something which might overflow an `i32`, use this version\ninstead of `check_range`.",10,{"inputs":[{"name":"iobuf"},{"name":"u32"},{"name":"usize"}],"output":{"name":"result"}}],[10,"check_range_fail","","The same as `check_range`, but fails if the bounds check returns `Err(())`.",10,{"inputs":[{"name":"iobuf"},{"name":"u32"},{"name":"u32"}],"output":null}],[10,"check_range_usize_fail","","The same as `check_range_usize`, but fails if the bounds check returns\n`Err(())`.",10,{"inputs":[{"name":"iobuf"},{"name":"u32"},{"name":"usize"}],"output":null}],[10,"unsafe_peek","","Reads the bytes at a given offset from the beginning of the window, into\nthe supplied buffer. It is undefined behavior to read outside the iobuf\nwindow.",10,null],[10,"unsafe_peek_be","","Reads a big-endian primitive at a given offset from the beginning of the\nwindow. It is undefined behavior to read outside the iobuf window.",10,{"inputs":[{"name":"iobuf"},{"name":"u32"}],"output":{"name":"t"}}],[10,"unsafe_peek_le","","Reads a little-endian primitive at a given offset from the beginning of\nthe window. It is undefined behavior to read outside the iobuf window.",10,{"inputs":[{"name":"iobuf"},{"name":"u32"}],"output":{"name":"t"}}],[10,"unsafe_consume","","Reads bytes, starting from the front of the window, into the supplied\nbuffer. After the bytes have been read, the window will be moved to no\nlonger include then.",10,null],[10,"unsafe_consume_be","","Reads a big-endian primitive at the beginning of the window.",10,{"inputs":[{"name":"iobuf"}],"output":{"name":"t"}}],[10,"unsafe_consume_le","","Reads a little-endian primitive at the beginning of the window.",10,{"inputs":[{"name":"iobuf"}],"output":{"name":"t"}}],[10,"invariant","","Checks internal state of the iobuf, to ensure that internal invariants are\nsatisified. Returns `Err(msg)` if any invariant isn't satisfied.",10,{"inputs":[{"name":"iobuf"}],"output":{"name":"result"}}],[10,"as_raw","","For internal use only.",10,{"inputs":[{"name":"iobuf"}],"output":{"name":"rawiobuf"}}],[10,"ptr","","Gets a pointer to the start of the internal backing buffer. This is\nextremely low level, and it is not recommended you use this interface.",10,{"inputs":[{"name":"iobuf"}],"output":{"name":"nonzero"}}],[10,"is_owned","","Returns `true` if the Iobuf points to owned memory (i.e. has to do a\nrefcount modification on `clone` or `drop`) or borrowed memory.",10,{"inputs":[{"name":"iobuf"}],"output":{"name":"bool"}}],[10,"lo_min","","Returns an index into the buffer returned by `ptr` that represents the\ninclusive lower bound of the limits.",10,{"inputs":[{"name":"iobuf"}],"output":{"name":"u32"}}],[10,"lo","","Returns an index into the buffer returned by `ptr` that represents the\ninclusive lower bound of the window.",10,{"inputs":[{"name":"iobuf"}],"output":{"name":"u32"}}],[10,"hi","","Returns an index into the buffer returned by `ptr` that represents the\nexclusive upper bound of the window.",10,{"inputs":[{"name":"iobuf"}],"output":{"name":"u32"}}],[10,"hi_max","","Returns an index into the buffer returned by `ptr` that represents the\nexclusive upper bound of the limits.",10,{"inputs":[{"name":"iobuf"}],"output":{"name":"u32"}}]],"paths":[[4,"BufSpan"],[4,"SpanIter"],[4,"SpanMoveIter"],[3,"ROIobuf"],[3,"RWIobuf"],[3,"AROIobuf"],[3,"UniqueIobuf"],[3,"IORingbuf"],[3,"AppendBuf"],[8,"Allocator"],[8,"Iobuf"]]};
initSearch(searchIndex);
